import net.masterthought.cucumber.Configuration
import net.masterthought.cucumber.ReportBuilder

group 'org.example'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'checkstyle'

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://repo.bodar.com'
        }
    }
    dependencies {
        classpath 'net.masterthought:cucumber-reporting:3.9.0'
    }
}

dependencies {
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
    compile group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '4.4.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    compile group: 'com.google.guava', name: 'guava', version: '30.1-jre'
    compile group: 'io.cucumber', name: 'cucumber-java', version: '6.10.2'
    compile group: 'io.cucumber', name: 'cucumber-testng', version: '6.10.2'
    testCompile group: 'io.cucumber', name: 'cucumber-picocontainer', version: '6.10.2'
}

// Checkstyle configuration
checkstyle {
    toolVersion = '8.41.1'
}

task runFeatures(type: Test) {
    // enable TestNG support (default is JUnit)
    useTestNG()
    options {
        useDefaultListeners = false
        jvmArgs = ['-Dcucumber.options= ' +
                           '--glue org.example ' +
                           '--plugin pretty ' +
                           '--plugin json:build/cucumber/cucumber.json ' +
                           '--plugin rerun:build/cucumber/rerun.txt ' +
                           splitFeatureFolders(featureFolders) + ' ' +
                           cucumberOptions]
        jvmArgs = ['-Dusername=' + username]
        jvmArgs = ['-Dpassword=' + password]
        jvmArgs = ['-Dbrowser=' + browser]
        jvmArgs = ['-DremoteUserName=' + remoteUserName]
        jvmArgs = ['-DremoteKey=' + remoteKey]
        jvmArgs = ['-DremoteBrowser=' + remoteBrowser]
        jvmArgs = ['-DremoteBrowserVersion=' + remoteBrowserVersion]
        jvmArgs = ['-DremotePlatform=' + remotePlatform]
        jvmArgs = ['-DremotePlatformVersion=' + remotePlatformVersion]
        jvmArgs = ['-DremoteResolution=' + remoteResolution]
        jvmArgs = ['-DdockerUrl=' + dockerUrl]
    }

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set JVM arguments for the test JVM(s)
    scanForTestClasses = false

    //turn off Gradle's HTML report to avoid replacing the reports generated by TestNG library:
    reports.html.enabled = false

    doLast {
        generateReport('build/cucumber/cucumber.json', 'build/cucumber/reports')
    }
}

task reRunFeatures(type: Test) {
    File failedScenariosFile = new File('build/cucumber/rerun.txt')
    if (failedScenariosFile.exists() && !failedScenariosFile.getText().isEmpty()) {

        // enable TestNG support (default is JUnit)
        useTestNG()
        options {
            useDefaultListeners = false
            jvmArgs = ['-Dcucumber.options=@build/cucumber/rerun.txt ' +
                               '--glue org.example ' +
                               '--plugin pretty ' +
                               '--plugin json:build/cucumber/retry/cucumber.json ' +
                               '--plugin rerun:build/cucumber/retry/rerun.txt ' +
                               cucumberOptions]
            jvmArgs = ['-Dusername=' + username]
            jvmArgs = ['-Dpassword=' + password]
            jvmArgs = ['-Dbrowser=' + browser]
            jvmArgs = ['-DremoteUserName=' + remoteUserName]
            jvmArgs = ['-DremoteKey=' + remoteKey]
            jvmArgs = ['-DremoteBrowser=' + remoteBrowser]
            jvmArgs = ['-DremoteBrowserVersion=' + remoteBrowserVersion]
            jvmArgs = ['-DremotePlatform=' + remotePlatform]
            jvmArgs = ['-DremotePlatformVersion=' + remotePlatformVersion]
            jvmArgs = ['-DremoteResolution=' + remoteResolution]
            jvmArgs = ['-DdockerUrl=' + dockerUrl]
        }

        // show standard out and standard error of the test JVM(s) on the console
        testLogging.showStandardStreams = true

        // set JVM arguments for the test JVM(s)
        scanForTestClasses = false

        //turn off Gradle's HTML report to avoid replacing the reports generated by TestNG library:
        reports.html.enabled = false
    }

    doLast {
        generateReport('build/cucumber/retry/cucumber.json', 'build/cucumber/retry/reports')
    }
}

def generateReport(String pathCucumber, String pathReport) {
    File reportOutputDirectory = new File(pathReport)
    List<String> jsonReportFiles = new ArrayList<>()
    jsonReportFiles.add(pathCucumber)

    List<String> jsonFiles = new ArrayList<>()
    jsonFiles.add(pathCucumber)

    String buildNumber = "1"
    String projectName = "cucumber-report"
    boolean runWithJenkins = false
    boolean parallelTesting = false

    Configuration configuration = new Configuration(reportOutputDirectory, projectName)
    // optional configuration
    configuration.setParallelTesting(parallelTesting)
    configuration.setRunWithJenkins(runWithJenkins)
    configuration.setBuildNumber(buildNumber)

    ReportBuilder reportBuilder = new ReportBuilder(jsonFiles, configuration)
    reportBuilder.generateReports()
}

def String splitFeatureFolders(String featureFolders) {
    def featureBasePath = 'classpath:'
    String[] listFeatureFolders = featureFolders.split(',')
    StringBuilder listFeaturesPath = new StringBuilder()
    listFeatureFolders.each { String item -> listFeaturesPath.append(featureBasePath + item.trim() + ' ') }
    return listFeaturesPath.toString()
}
